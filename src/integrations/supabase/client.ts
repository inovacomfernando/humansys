// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://hdugxslfoujddlbkvvak.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImhkdWd4c2xmb3VqZGRsYmt2dmFrIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDgyNjMwMzksImV4cCI6MjA2MzgzOTAzOX0.V1CflAVNQGZyjl36gs4mzHY1HxvzrD1_nwXc4zPTTRw";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

// Create singleton instance to avoid multiple GoTrueClient instances
let supabaseInstance: any = null;

export const supabase = supabaseInstance || (supabaseInstance = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    autoRefreshToken: true,
    persistSession: true,
    detectSessionInUrl: true,
    storage: window.localStorage,
    storageKey: 'supabase.auth.token',
    flowType: 'pkce'
  },
  global: {
    headers: {
      'X-Client-Info': 'lovable-hr-dashboard'
    }
  },
  realtime: {
    params: {
      eventsPerSecond: 2
    }
  }
}));

// Função auxiliar para verificar conectividade - versão corrigida
export const checkSupabaseConnection = async (): Promise<boolean> => {
  try {
    // Verificar conectividade básica primeiro
    const response = await fetch(`${SUPABASE_URL}/rest/v1/`, {
      method: 'HEAD',
      headers: {
        'apikey': SUPABASE_PUBLISHABLE_KEY,
        'Authorization': `Bearer ${SUPABASE_PUBLISHABLE_KEY}`
      }
    });

    if (!response.ok) {
      console.warn('Supabase HEAD request failed:', response.status);
      return false;
    }

    // Verificar se conseguimos fazer uma query simples
    const { error } = await supabase
      .from('profiles')
      .select('id')
      .limit(1);

    if (error) {
      console.warn('Supabase query test failed:', error.message);
      // Se o erro é de autenticação, ainda consideramos conectado
      if (error.message.includes('JWT') || error.message.includes('auth')) {
        return true;
      }
      return false;
    }

    return true;
  } catch (error) {
    console.error('Connection check failed:', error);
    return false;
  }
};

// Cache para melhorar performance
export const queryCache = new Map();

// Função para limpar cache
export const clearQueryCache = () => {
  queryCache.clear();
  console.log('Query cache cleared');
};

// Função para refresh completo do sistema
export const refreshSystemData = async () => {
  try {
    clearQueryCache();
    localStorage.removeItem('supabase.auth.token');

    // Recarregar a página para garantir estado limpo
    window.location.reload();

    return true;
  } catch (error) {
    console.error('System refresh failed:', error);
    return false;
  }
};